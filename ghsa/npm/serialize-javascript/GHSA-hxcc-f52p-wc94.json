{
  "Severity": "HIGH",
  "UpdatedAt": "2020-08-11T14:14:52Z",
  "Package": {
    "Ecosystem": "NPM",
    "Name": "serialize-javascript"
  },
  "Advisory": {
    "DatabaseId": 2294,
    "Id": "MDE2OlNlY3VyaXR5QWR2aXNvcnlHSFNBLWh4Y2MtZjUycC13Yzk0",
    "GhsaId": "GHSA-hxcc-f52p-wc94",
    "References": [
      {
        "Url": "https://nvd.nist.gov/vuln/detail/CVE-2020-7660"
      },
      {
        "Url": "https://github.com/advisories/GHSA-hxcc-f52p-wc94"
      }
    ],
    "Identifiers": [
      {
        "Type": "GHSA",
        "Value": "GHSA-hxcc-f52p-wc94"
      },
      {
        "Type": "CVE",
        "Value": "CVE-2020-7660"
      }
    ],
    "Description": "serialize-javascript prior to 3.1.0 allows remote attackers to inject arbitrary code via the function \"deleteFunctions\" within \"index.js\". \r\n\r\nAn object such as `{\"foo\": /1\"/, \"bar\": \"a\\\"@__R-\u003cUID\u003e-0__@\"}` was serialized as `{\"foo\": /1\"/, \"bar\": \"a\\/1\"/}`, which allows an attacker to escape the `bar` key. This requires the attacker to control the values of both `foo` and `bar` and guess the value of `\u003cUID\u003e`. The UID has a keyspace of approximately 4 billion making it a realistic network attack.\r\n\r\nThe following proof-of-concept calls `console.log()` when the running `eval()`:\r\n`eval('('+ serialize({\"foo\": /1\" + console.log(1)/i, \"bar\": '\"@__R-\u003cUID\u003e-0__@'}) + ')');`",
    "Origin": "UNSPECIFIED",
    "PublishedAt": "2020-08-11T17:21:13Z",
    "Severity": "HIGH",
    "Summary": "Insecure serialization leading to RCE in serialize-javascript",
    "UpdatedAt": "2020-08-11T17:21:13Z",
    "WithdrawnAt": ""
  },
  "Versions": [
    {
      "FirstPatchedVersion": {
        "Identifier": "3.1.0"
      },
      "VulnerableVersionRange": "\u003c 3.1.0"
    }
  ]
}